/* automatically generated by rust-bindgen 0.55.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub type __u8 = ::std::os::raw::c_uchar;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __u32 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btf_ext_info {
    pub info: *mut ::std::os::raw::c_void,
    pub rec_size: __u32,
    pub len: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btf_ext_header {
    pub magic: __u16,
    pub version: __u8,
    pub flags: __u8,
    pub hdr_len: __u32,
    pub func_info_off: __u32,
    pub func_info_len: __u32,
    pub line_info_off: __u32,
    pub line_info_len: __u32,
    pub core_relo_off: __u32,
    pub core_relo_len: __u32,
}
#[repr(C)]
#[derive(Debug)]
pub struct btf_ext_info_sec {
    pub sec_name_off: __u32,
    pub num_info: __u32,
    pub data: __IncompleteArrayField<__u8>,
}
pub mod bpf_core_relo_kind {
    pub type Type = ::std::os::raw::c_uint;
    pub const BPF_FIELD_BYTE_OFFSET: Type = 0;
    pub const BPF_FIELD_BYTE_SIZE: Type = 1;
    pub const BPF_FIELD_EXISTS: Type = 2;
    pub const BPF_FIELD_SIGNED: Type = 3;
    pub const BPF_FIELD_LSHIFT_U64: Type = 4;
    pub const BPF_FIELD_RSHIFT_U64: Type = 5;
    pub const BPF_TYPE_ID_LOCAL: Type = 6;
    pub const BPF_TYPE_ID_TARGET: Type = 7;
    pub const BPF_TYPE_EXISTS: Type = 8;
    pub const BPF_TYPE_SIZE: Type = 9;
    pub const BPF_ENUMVAL_EXISTS: Type = 10;
    pub const BPF_ENUMVAL_VALUE: Type = 11;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_core_relo {
    pub insn_off: __u32,
    pub type_id: __u32,
    pub access_str_off: __u32,
    pub kind: bpf_core_relo_kind::Type,
}
